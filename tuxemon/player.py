# SPDX-License-Identifier: GPL-3.0
# Copyright (c) 2014-2024 William Edwards <shadowapex@gmail.com>, Benjamin Bean <superman2k5@gmail.com>
from __future__ import annotations

import logging

from tuxemon import prepare, time_handler
from tuxemon.map import proj
from tuxemon.npc import NPC
from tuxemon.states.world.worldstate import WorldState

logger = logging.getLogger(__name__)


# Class definition for the player.
class Player(NPC):
    """Object for Players. WIP."""

    def __init__(
        self,
        npc_slug: str,
        world: WorldState,
    ) -> None:
        super().__init__(npc_slug, world=world)
        self.isplayer = True

    def update(self, time_delta: float) -> None:
        """
        Update the player movement around the game world.

        Increment the number of steps.

        Parameters:
            time_delta: A float of the time that has passed since
                the last frame. This is generated by clock.tick() / 1000.0.

        """
        # TODO: this will also record involuntary steps.
        # refactor so that only movements from the player are recorded.
        before = proj(self.position3)

        super().update(time_delta)

        after = proj(self.position3)

        diff_x = abs(after.x - before.x)
        diff_y = abs(after.y - before.y)

        # increases steps player
        self.steps += diff_x + diff_y

        # increases steps party monsters
        for monster in self.monsters:
            monster.steps += diff_x + diff_y

        # checks variables starting with steps_
        for key, value in self.game_variables.items():
            if key.startswith("steps_"):
                if float(value) > 0.0:
                    self.game_variables[key] = float(value) - (diff_x + diff_y)
                else:
                    self.game_variables[key] = 0.0

        # Get current time
        current_time = time_handler.get_current_time()

        # Update time-related variables
        self.game_variables["hour"] = current_time.strftime("%H")
        self.game_variables["day_of_year"] = str(
            current_time.timetuple().tm_yday
        )
        self.game_variables["year"] = current_time.strftime("%Y")
        self.game_variables["weekday"] = current_time.strftime("%A")
        self.game_variables["leap_year"] = (
            "true" if time_handler.is_leap_year(current_time.year) else "false"
        )
        self.game_variables["daytime"] = (
            time_handler.calculate_day_night_cycle(current_time)
        )
        self.game_variables["stage_of_day"] = (
            time_handler.calculate_day_stage_of_day(current_time)
        )
        self.game_variables["season"] = time_handler.determine_season(
            current_time,
            self.game_variables.get("hemisphere", prepare.NORTHERN),
        )
