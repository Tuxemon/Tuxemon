# SPDX-License-Identifier: GPL-3.0
# Copyright (c) 2014-2023 William Edwards <shadowapex@gmail.com>, Benjamin Bean <superman2k5@gmail.com>
from __future__ import annotations

import datetime as dt
import logging

from tuxemon.map import proj
from tuxemon.npc import NPC
from tuxemon.states.world.worldstate import WorldState

logger = logging.getLogger(__name__)


# Class definition for the player.
class Player(NPC):
    """Object for Players. WIP."""

    def __init__(
        self,
        npc_slug: str,
        world: WorldState,
    ) -> None:
        super().__init__(npc_slug, world=world)
        self.isplayer = True

        # Game variables for use with events
        self.game_variables = {"steps": 0}

    def update(self, time_delta: float) -> None:
        """
        Update the player movement around the game world.

        Increment the number of steps.

        Parameters:
            time_delta: A float of the time that has passed since
                the last frame. This is generated by clock.tick() / 1000.0.

        """
        # TODO: this will also record involuntary steps.
        # refactor so that only movements from the player are recorded.
        before = proj(self.position3)

        super().update(time_delta)

        after = proj(self.position3)

        diff_x = abs(after.x - before.x)
        diff_y = abs(after.y - before.y)

        self.game_variables["steps"] += diff_x + diff_y
        """
        %H - Hour 00-23
        %j - Day number of year 001-366
        """
        var = self.game_variables
        var["hour"] = dt.datetime.now().strftime("%H")
        var["day_of_year"] = str(dt.datetime.now().timetuple().tm_yday)
        var["year"] = dt.datetime.now().strftime("%Y")

        # Leap year
        if (int(var["year"]) % 400 == 0) and (int(var["year"]) % 100 == 0):
            var["leap_year"] = "true"
        elif (int(var["year"]) % 4 == 0) and (int(var["year"]) % 100 != 0):
            var["leap_year"] = "true"
        else:
            var["leap_year"] = "false"

        # Day and night basic cycle (12h cycle)
        if int(var["hour"]) < 6:
            var["daytime"] = "false"
        elif 6 <= int(var["hour"]) < 18:
            var["daytime"] = "true"
        else:
            var["daytime"] = "false"

        # Day and night complex cycle (4h cycle)
        if int(var["hour"]) < 4:
            var["stage_of_day"] = "night"
        elif 4 <= int(var["hour"]) < 8:
            var["stage_of_day"] = "dawn"
        elif 8 <= int(var["hour"]) < 12:
            var["stage_of_day"] = "morning"
        elif 12 <= int(var["hour"]) < 16:
            var["stage_of_day"] = "afternoon"
        elif 16 <= int(var["hour"]) < 20:
            var["stage_of_day"] = "dusk"
        else:
            var["stage_of_day"] = "night"

        # Seasons
        if var["hemisphere"] == "Northern":
            if int(var["day_of_year"]) < 81:
                var["season"] = "winter"
            elif 81 <= int(var["day_of_year"]) < 173:
                var["season"] = "spring"
            elif 173 <= int(var["day_of_year"]) < 265:
                var["season"] = "summer"
            elif 265 <= int(var["day_of_year"]) < 356:
                var["season"] = "autumn"
            else:
                var["season"] = "winter"
        else:
            if int(var["day_of_year"]) < 81:
                var["season"] = "summer"
            elif 81 <= int(var["day_of_year"]) < 173:
                var["season"] = "autumn"
            elif 173 <= int(var["day_of_year"]) < 265:
                var["season"] = "winter"
            elif 265 <= int(var["day_of_year"]) < 356:
                var["season"] = "spring"
            else:
                var["season"] = "summer"
